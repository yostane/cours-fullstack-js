{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Bienvenue au support de cours.</p> <p></p>"},{"location":"#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>VScode et les extensions suivantes: ESLint, Prettier et indent-rainbow.</li> </ul>"},{"location":"js/","title":"JavaScript","text":""},{"location":"js/#exercices","title":"Exercices","text":"<p>Utiliser <code>filter</code> et <code>map</code> et les objets litt\u00e9raux.</p> <ol> <li>Cr\u00e9er une fonction qui prend un tableau d'entiers et retourne le triple des \u00e9l\u00e9ments pairs et le double des \u00e9l\u00e9ments impairs.</li> <li>Cr\u00e9er une fonction qui prend un tableau de cha\u00eenes de caract\u00e8res et retourne un tableau contenant la longueur de chaque cha\u00eene.<ul> <li>Par exemple pour <code>['un', 'deux']</code> on obtient <code>[2, 4]</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend un tableau de cha\u00eenes de caract\u00e8res et retourne un tableau d'objets avec le format suivant: <code>[{text: 'valeur du texte', length: 4}, ...]</code><ul> <li>Par exemple pour <code>['un', 'deux']</code> on obtient <code>[ { text: 'un', length: 2 }, { text: 'deux', length: 4 } ]</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui tableau d'objets avec le format suivant <code>[{text: 'valeur du texte', length: 4}, ...]</code> et affiche dans la console deux tableaux: un avec les textes et un avec les longueurs.<ul> <li>Par exemple pour <code>[ { text: 'un', length: 2 }, { text: 'deux', length: 4 } ]</code> on obtient l'affichage suivant dans la console: <code>['un', 'deux'] [2, 4]</code></li> </ul> </li> <li>Refaire le m\u00eame exercice que pr\u00e9c\u00e9demment mais ignorant les mots dont la longueur est un nombre premier (il ne figurant pas dans l'affichage final).<ul> <li>Par exemple pour <code>[ { text: 'aa', length: 2 }, { text: 'bbbb', length: 4 }, { text: 'ccccc', length: 5 } ]</code> on obtient l'affichage suivant dans la console: <code>['bbbb'] [4]</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend deux arguments: un tableau d'objets Todo <code>[{id:1, title:\"..\", completed: true/false}, ...]</code> et un entier. La fonction doit retourner le tableau de Todos en basculant (toggle) le statut de <code>completed</code> pour le Todo dont l'id est \u00e9gal \u00e0 l'entier pass\u00e9 en argument.<ul> <li>Par exemple pour <code>[{id:1, title:\"..\", completed: true}, {id:2, title:\"..\", completed: false}]</code> et <code>2</code> on obtient <code>[{id:1, title:\"..\", completed: true}, {id:2, title:\"..\", completed: true}]</code></li> <li>Par exemple pour <code>[{id:1, title:\"..\", completed: true}, {id:2, title:\"..\", completed: false}]</code> et <code>1</code> on obtient <code>[{id:1, title:\"..\", completed: false}, {id:2, title:\"..\", completed: false}]</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend un tableau d'objets Todo (voir exo pr\u00e9c\u00e9dent) et renvoie le titre des todos termin\u00e9s.<ul> <li>Par exemple: <code>[{id:1, title:\"Todo 1\", completed: true}, {id:2, title:\"Todo 2\", completed: false}]</code> on obtient <code>['Todo 1']</code></li> </ul> </li> </ol>"},{"location":"js/#astuces","title":"Astuces","text":"<ul> <li>Si besoin, vous pouvez utiliser Math.random, pour g\u00e9n\u00e9rer des nombres al\u00e9atoires.</li> </ul>"},{"location":"projets/","title":"Projets","text":""},{"location":"projets/#projet-crud-avec-reactjs","title":"Projet CRUD avec ReactJS","text":"<p>R\u00e9aliser une application CRUD avec le th\u00e8me de votre choix.</p> <ul> <li>Fonctionnalit\u00e9s vues en cours appliqu\u00e9es \u00e0 votre projet (5 pts)</li> <li>Authentification</li> <li>R\u00f4le \"utilisateur\" connect\u00e9</li> <li>Ajout / suppression de favoris</li> <li>Affichage et suppression d'\u00e9l\u00e9ments</li> <li>Utiliser les services BDD et authent de Firebase</li> <li>Utiliser Firebase hosting pour h\u00e9berger le site.</li> <li>Proposer 2 \u00e9crans suppl\u00e9mentaires (via le routage)</li> <li>Ecran de profil (2 pts)</li> <li>Ecran des favoris de l'utilisateur connect\u00e9 (3 pts)</li> <li>Ajouter une gestion des r\u00f4les suivants (en plus du r\u00f4le \"utilisateur\" d\u00e9j\u00e0 pr\u00e9sent):</li> <li>Invit\u00e9 (non connect\u00e9) qui peut lister uniquement (2 pts)</li> <li>Administrateur qui peut supprimer et \u00e9diter des donn\u00e9es (4 pts)</li> <li>Belle interface et plus travaill\u00e9e par rapport au projet vu en cours (4 pts)</li> <li>Pour chaque bogue trouv\u00e9, il y aura des points en moins.</li> </ul> <p>Il est possible de se faire aider par de l'IA g\u00e9n\u00e9rative de fa\u00e7on raisonnable (tant qu'on arrive \u00e0 expliquer le code correctement). Par contre, il n'est pas autoris\u00e9 de rendre le r\u00e9sultat d'un tutoriel (sinon, la note sera de 0)</p>"},{"location":"projets/#veterlib","title":"veterlib","text":"<p>R\u00e9aliser un application de prise de rdv pour animaux chez un v\u00e9t\u00e9rinaire.</p> <ul> <li>On peut s'inscrire en tant que v\u00e9t\u00e9rinaire ou patient</li> <li>Les patients peuvent prendre un rdv aupr\u00e8s d'un v\u00e9to</li> <li>L'API permet de listes les cr\u00e9neaux disponible par jour et par v\u00e9t\u00e9rinaire</li> <li>Un v\u00e9t\u00e9rinaire peut demande son agenda \u00e0 l'API</li> <li>Hypoth\u00e8ses:</li> <li>Les rdv durent 30m</li> <li>Les v\u00e9t\u00e9rinaires travaillent du lundi au vendredi de 9h \u00e0 18h non stop</li> </ul>"},{"location":"projets/#project-dapi-de-gestion-de-fichiers-de-type-drive","title":"Project d'API de gestion de fichiers de type \"Drive\"","text":""},{"location":"projets/#sujet","title":"Sujet","text":"<ul> <li>L'utilisateur doit avoir un compte ou cr\u00e9er un compte pour utiliser le service</li> <li>Possibilit\u00e9 d'uploader, t\u00e9l\u00e9charger, modifier et supprimer les fichiers</li> <li>Possibilit\u00e9 de cr\u00e9er des dossiers et de placer les fichiers dans les dossiers</li> <li>Possibilit\u00e9 de partager des fichiers pour d'autres utilisateurs via leur email</li> <li>Lien de partage public et g\u00e9n\u00e9ration de l'image QRCode de ce lien</li> </ul>"},{"location":"projets/#outils-et-librairies-utilises","title":"Outils et librairies utilis\u00e9s","text":"<ul> <li>jest est une librairie test runner et un test runner</li> <li>Librairie test: permet de d\u00e9finir des tests dans le code (<code>expect</code>, <code>test</code>, etc.)</li> <li>Test runner: permet d'ex\u00e9cuter des tests et de g\u00e9n\u00e9rer un rapport \u00e0 la fin</li> <li>prettier et .prettierrc: permet d'automatiquement appliquer des convention de programmation.</li> <li>TypeScript et son fichier de configuration tsconfig.json</li> <li>docker-compose.yml permet de configurer l'image BDD postgres utilis\u00e9e pour l'environnement de dev</li> <li>Installer docker et docker-composer ou podman et podman-compose</li> <li>Instructions pour podman: <code>scoop install podman</code> puis <code>pip3 install podman-compose</code> ou <code>pip install -r requirements.txt</code></li> <li>dotenvx permet d'avoir plusieurs fichiers d'environnements. Consulter la partie <code>scripts</code> dans package.json pour voir des exemples d'utilisation (exemple plus bas en annexe).</li> <li>sequelize-typescript est un ORM bas\u00e9 sur sequelize et optimis\u00e9 pour TypeScript.</li> <li><code>tsoa</code> (json open api) + Swagger UI. tsoa permet de g\u00e9n\u00e9rer la documentation de l'API au formats openAPI ou swagger. Swagger UI permet de g\u00e9n\u00e9rer l'interface web qui permet d'explorer</li> <li>tuto1</li> <li><code>Concurrently</code> permet de de lancer deux plusieurs t\u00e2ches en temps. Il nous sert \u00e0 lancer en m\u00eame temps la g\u00e9n\u00e9ration du fichier openAPI et l'ex\u00e9cution du serveur de dev.</li> <li>Utiliser sequelize-typescript pour une meilleure int\u00e9gration avec tsoa compar\u00e9 \u00e0 sequelize</li> <li>Journalisation des appels avec le middleware Morgan</li> <li>Gestion du content-type de type <code>multipart/form-data</code> avec multer. Cette librairie permet de r\u00e9cup\u00e9rer certaines parties du body dans dans des fichiers, ce qui est utile pour impl\u00e9menter la fonctionnalit\u00e9 d'upload.</li> <li>Passport.js et passport-jwt, permettent de rajouter un middleware qui v\u00e9rifie la pr\u00e9sence du token jwt dans le header <code>Authorization</code> sur les routes qu'on souhaite prot\u00e9ger. Il nous donne ainsi la possibilit\u00e9 de renseigner le champ <code>req.user</code> avec l'utilisateur courant.</li> <li>jsonwebtoken permet de g\u00e9n\u00e9rer un JWT</li> <li>Penser \u00e0 faire un <code>npm i --save-dev @types/[librariejs]</code> pour qu'elle soit mieux reconnue et document\u00e9e quand on code en TypeScript. Par exemple <code>npm i --save-dev @types/morgan @types/jsonwebtoken</code>.</li> </ul>"},{"location":"projets/#annexe","title":"Annexe","text":"<ul> <li>Exemple de fichier de configuration d'un environnement de dev</li> </ul> <pre><code>ENVIRONMENT=dev\nDB_DIALECT=postgres\nDB_USER=dev_user\nDB_PASSWORD=dev_pwd\nDB_DATABASE=awesomeapi\n</code></pre> <ul> <li>Exemple d'interface swagger</li> </ul>"},{"location":"projets/#project-dapi-de-gestion-de-fichiers-simple","title":"Project d'API de gestion de fichiers simple","text":"<p>Proposer une api REST qui permet de stocker des fichiers avec leurs m\u00e9tadonn\u00e9es (nom, taille, url, etc.).</p>"},{"location":"projets/#sujet_1","title":"Sujet","text":"<ul> <li>Compl\u00e9ter l'API pour avoir toutes les routes CRUD manquantes (PUT, PATCH, DELTE d'un fichier) fonctionnelles avec une BDD sqlite. (5 pts)</li> <li>Proposer une route GET <code>/qrcode/:id</code> qui fournit le lien d'un fichier sous forme d'une image QRCode (\ud83d\udca1 utiliser la lib qrcode) (1 pts)</li> <li>Proposer une route GET <code>/filter/images</code> qui liste les images (fichiers avec les extensions png, jpg, jpeg, gif et svg). Les autres fichiers ne doivent pas \u00eatre list\u00e9s. (1 pts)</li> <li>Proposer une route GET <code>/check/id:</code> qui v\u00e9rifie si l'url du fichier est joignable (\ud83d\udca1 via une requ\u00eate HEAD par exemple, \ud83d\udca1 vous pouvez utiliser axios pour faire la requ\u00eate) (1 pt)</li> <li>Proposer une route GET <code>/sort/descending</code> qui affiche les fichiers tri\u00e9s par ordre d\u00e9croissant de taille. (1 pts)</li> <li>Proposer une route GET <code>/search/:name</code> qui permet de rechercher les fichiers qui contiennent le mot <code>:name</code> dans leurs noms. (1 pts)</li> <li>Proposer une route GET <code>/lastdays/:days</code> qui affiche les fichiers qui ont \u00e9t\u00e9 modifi\u00e9s ou cr\u00e9\u00e9s dans les <code>:days</code> derniers jours. (1 pts)</li> <li>Proposer une route GET <code>/latestfiles/:count</code> qui affiche les <code>:count</code> derniers fichiers qui ont \u00e9t\u00e9 cr\u00e9\u00e9s. (1 pts)</li> <li>Proposer une route DELETE <code>/large/:size</code> qui supprime les fichiers dont la taille d\u00e9passe strictement <code>:size</code>. Dans le cas o\u00f9 aucun fichier n'a \u00e9t\u00e9 supprim\u00e9, renvoyer une 204. Si au moins un fichier a \u00e9t\u00e9 supprim\u00e9, renvoyer une 200. (2 pt)</li> <li>Proposer une route PATCH <code>/rename/:oldDomain/:newDomain</code> qui remplace tous les domaines <code>:oldDomain</code> par <code>:newDomain</code> dans le champ url. (3 pts)</li> <li>Proposer une route GET <code>/stats/total</code> qui calcule et retourne l'objet suivant avec les bonnes valeurs (3 pts) (astuce utiliser <code>findOne</code> et <code>sequelize.fn</code>):</li> </ul> <pre><code>{\n  \"totalSize\": 123456,\n  \"totalFiles\": 123,\n  \"maxSize\": 123456,\n  \"minSize\": 123,\n  \"averageSize\": 123,\n  \"lastUpdatedAt\": \"2021-01-01T00:00:00.000Z\"\n}\n</code></pre>"},{"location":"projets/#liens-utils","title":"Liens utils","text":"<ul> <li>Applying where clauses in sequelize</li> <li>sequelize.fn pour faire des agr\u00e9gations</li> <li>Autre exemple de sequelize.fn pour faire des agr\u00e9gations</li> </ul>"},{"location":"reactjs/","title":"React","text":""},{"location":"reactjs/#quelques-definitions","title":"Quelques d\u00e9finitions","text":"<ul> <li>Le page d'accueil du site react.dev ainsi que react.dev/learn proposent une bonne introduction aux composants react.</li> <li>Composition : combiner des composants avec d'autres composants.</li> <li>Un composant react est une fonction qui retourne du JSX (du HTML dans du JS).</li> </ul>"},{"location":"reactjs/#projet-reactjs-avec-vite","title":"Projet reactjs avec vite","text":"<pre><code>npm create vite@latest my-react-app -- --template react\ncd my-react-app\nnpm install\n# Lancer un serveur de d\u00e9veloppement\nnpm run dev\n# Cr\u00e9er un build de production\nnpm run build\n</code></pre> <p>Dans le dossier <code>src</code>, cr\u00e9er le dossier <code>components</code> et y ajouter un fichier <code>Hello.jsx</code>.</p> <ul> <li>Ajouter un composant <code>Hello</code> qui prend un prop <code>name</code> et affiche <code>Hello, {name}</code>.</li> <li>Ajouter un composant <code>StateDemo</code> qui illustre l'\u00e9tat local avec <code>useState</code>.</li> </ul>"},{"location":"reactjs/#exercices","title":"Exercices","text":""},{"location":"reactjs/#basique","title":"Basique","text":"<ol> <li>Cr\u00e9er un composant <code>Counter</code> qui affiche un bouton <code>+</code> et un bouton <code>-</code> pour incr\u00e9menter et d\u00e9cr\u00e9menter un compteur. Initialiser le compteur \u00e0 42.</li> <li>Cr\u00e9er un composant <code>ToLowerCase</code> qui prend un prop (ou un argument) <code>text</code> et affiche le texte en minuscules. (\ud83d\udca1 astuce: <code>string.toLowerCase()</code>)</li> <li>Cr\u00e9er un composant <code>EurToYen</code> qui permet de saisir des euros et affiche le montant en yens (1 euro = 130 yens). (\ud83d\udca1 astuce: utiliser <code>&lt;input type=\"number\" /&gt;</code>)</li> <li>Cr\u00e9er un composant <code>ShowMax</code> qui prend deux nombres en props et affiche le plus grand.</li> <li>Cr\u00e9er un composant <code>Guess</code> qui affiche un zone \u00e9ditable num\u00e9rique et un bouton. A chaque fois que l'utilisateur clique sur le bouton, le composant g\u00e9n\u00e8re un nouveau nombre al\u00e9atoire entre 1 et 10 et affiche si le nombre saisi est trop grand, trop petit ou si c'est le bon nombre. (\ud83d\udca1 astuce: utiliser <code>Math.random()</code> pour g\u00e9n\u00e9rer un nombre al\u00e9atoire).</li> <li>Cr\u00e9er un composant <code>CountConsonantsAndVowels</code> qui prend un prop <code>text</code> et affiche le nombre de consonnes et de voyelles (aeiuyo) dans le texte. Instancier ce composant dans <code>&lt;App&gt;</code> et faire en sorte que le prop soit aliment\u00e9 via la valeur d'un texte editable isntanci\u00e9 dans <code>&lt;App&gt;</code>. (\ud83d\udca1 astuce: utiliser <code>string.match(/[aeiuyo]/gi)</code> pour compter les voyelles).</li> <li>Cr\u00e9er un composant <code>Palindrome</code> qui prend un prop <code>text</code> et affiche si le texte est un palindrome ou non. (\ud83d\udca1 astuce: utiliser <code>string.split('').reverse().join('')</code> pour inverser une cha\u00eene de caract\u00e8res).</li> <li>Cr\u00e9er un composant <code>Fibonacci</code> qui prend un prop <code>n</code> et affiche le n-i\u00e8me terme de la suite de Fibonacci.</li> </ol> Solutions ExoCounter.jsx<pre><code>import { useState } from \"react\";\n\nexport default function ExoCount(){\n  const initialValue = 42;\n  // const [\u00e9tat, fonction de maj de l'\u00e9tat] = useState(val par d\u00e9faut);\n  const [count, setCount] = useState(initialValue);\n\n  return &lt;&gt;\n  &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;\n  {count}\n  &lt;button onClick={() =&gt; setCount(count - 1)}&gt;-&lt;/button&gt;\n  &lt;button onClick={() =&gt; setCount(initialValue)}&gt;Reset&lt;/button&gt;\n  &lt;/&gt;;\n}\n</code></pre> ExoCounter.jsx<pre><code>import PropTypes from \"prop-types\";\n\nexport default function ExoLowerCase({ text }) {\n  const lowerCased = text.toLowerCase();\n  return (\n    &lt;&gt;\n      &lt;ul&gt;\n        &lt;li&gt;\n          M\u00e9thode 1 en calculant dans la partie code du composant: {lowerCased}\n        &lt;/li&gt;\n        &lt;li&gt;M\u00e9thode 2 directement dans le html: {text.toLowerCase()}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n\n// la prp text est une cha\u00eene de caract\u00e8res obligatoire\nExoLowerCase.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n</code></pre> EuroToYen.jsx<pre><code>import { useState } from \"react\";\n\nexport default function EuroToYen() {\n  const [euro, setEuro] = useState(0);\n  const yen = euro * 165;\n  return (\n    &lt;&gt;\n      &lt;label htmlFor=\"euro\"&gt;Euros&lt;/label&gt;\n      &lt;input\n        type=\"number\"\n        name=\"euro\"\n        value={euro}\n        onChange={(event) =&gt; setEuro(event.target.value)}\n      /&gt;\n      Yen: {yen}\n    &lt;/&gt;\n  );\n}\n</code></pre> ShowMax.jsx<pre><code>import PropTypes from \"prop-types\";\n\nexport default function ShowMax({ a, b }) {\n  const max = a &gt;= b ? a : b;\n  let maxIf = a;\n  if (a &gt; b) {\n    maxIf = a;\n  } else {\n    maxIf = b;\n  }\n  return (\n    &lt;&gt;\n      Max of {a} and {b} is {max}, {a &gt;= b ? a : b} , {maxIf}\n    &lt;/&gt;\n  );\n}\n\nShowMax.propTypes = {\n  a: PropTypes.number.isRequired,\n  b: PropTypes.number.isRequired,\n};\n</code></pre> CountConsonantsAndVowels.jsx<pre><code>import PropTypes from \"prop-types\";\n\nexport default function CountConsonantsAndVowels({ word }) {\n  // word.match(/[aeiuyo]/gi)? : renvoie un tableau qui peut \u00eatre null et ? renvoie null au lieu de crasher\n  // ?? 0 Si le r\u00e9sultat est null, on renvoie 0\n  const vowelCount = word.match(/[aeiuyo]/gi)?.length ?? 0;\n  return (\n    &lt;&gt;\n      Vowels of {word}: {vowelCount}. Consonants: {word.length - vowelCount}\n    &lt;/&gt;\n  );\n}\n\nCountConsonantsAndVowels.propTypes = {\n  word: PropTypes.string.isRequired,\n};\n</code></pre>"},{"location":"reactjs/#listes","title":"Listes","text":"<ol> <li>Cr\u00e9er un composant <code>ShowLengths</code> qui prend un prop <code>items</code> (un tableau de cha\u00eenes de caract\u00e8res) et affiche chaque \u00e9l\u00e9ment suivi de sa longueur. (\ud83d\udca1 astuce: utiliser <code>string.length</code> pour obtenir la longueur d'une cha\u00eene de caract\u00e8res).<ul> <li>Par exemple, si <code>items = ['un', 'deux', 'trois']</code>, le composant affiche:     <pre><code>un (2)\ndeux (4)\ntrois (5)\n</code></pre></li> </ul> </li> <li>Cr\u00e9er un composant <code>ShowAlternating</code> qui prend un prop <code>items</code> (un tableau de cha\u00eenes de caract\u00e8res) et affiche les \u00e9l\u00e9ments de la liste en alternant les couleurs de fond (par exemple, une ligne sur deux en gris). (\ud83d\udca1 astuce: utiliser <code>index % 2 === 0</code> pour tester si l'index est pair).<ul> <li>Par exemple: si <code>items = ['un', 'deux', 'trois']</code>, le composant affiche:     <pre><code>un (avec fond gris)\ndeux (sans fond)\ntrois (avec fond gris)\n</code></pre></li> </ul> </li> <li>Cr\u00e9er un composant <code>LoggerComponent</code> qui affiche un champ de texte \u00e9ditable et un bouton Ajouter. Chaque fois que l'utilisateur clique sur le bouton Ajouter, le texte saisi est ajout\u00e9 \u00e0 une liste. Afficher la liste des textes saisis.<ul> <li>Par exemple, si l'utilisateur saisit \"un\", \"deux\" et \"trois\", le composant affiche:     <pre><code>un\ndeux\ntrois\n</code></pre></li> </ul> </li> <li>Cr\u00e9er un composant <code>LoggerComponentExtended</code> qui affiche un champ de texte \u00e9ditable et un bouton Ajouter. Chaque fois que l'utilisateur clique sur le bouton Ajouter, le texte saisi est ajout\u00e9 \u00e0 une liste contenant \u00e9galement l'horodatage de l'ajout. Afficher la liste.<ul> <li>Par exemple, si l'utilisateur saisit \"un\", \"deux\" et \"trois\", le composant affiche:     <pre><code>2022-01-01 12:00:00 un\n2022-01-01 12:00:01 deux\n2022-01-01 12:00:02 trois\n</code></pre></li> </ul> </li> <li>Cr\u00e9er un composant <code>EditableLogger</code> qui affiche un champ de texte \u00e9ditable et un bouton Ajouter. Chaque fois que l'utilisateur clique sur le bouton Ajouter, le texte saisi est ajout\u00e9 \u00e0 une liste contenant \u00e9galement l'horodatage de l'ajout. <ul> <li>Afficher la liste en permettant d'\u00e9diter le corps (pas la date) de chaque ligne \u00e9l\u00e9ment et de supprimer un \u00e9l\u00e9ment.</li> <li>Par exemple, si l'utilisateur saisit \"un\", \"deux\" et \"trois\", le composant affiche:     <pre><code>2022-01-01 12:00:00 un [Input pour modifier le texte] [Bouton pour supprimer]\n2022-01-01 12:00:01 deux [Input pour modifier le texte] [Bouton pour supprimer]\n2022-01-01 12:00:02 trois [Input pour modifier le texte] [Bouton pour supprimer]\n</code></pre></li> <li>Ajouter les boutons sauvegarder et charger pour sauvegarder la liste dans le local storage et la charger au d\u00e9marrage de l'application ou au clique sur le bouton charger.</li> </ul> </li> </ol> Solutions StringsLengths.jsx<pre><code>import PropTypes from \"prop-types\";\n\n/**\n * To instanciate &lt;StringLengths items={[\"un\", \"deux\", \"trois\"]} /&gt;\n * @param {{texts: string[]}}\n * @returns\n */\nexport default function StringLengths({ texts }) {\n  const textsElements = texts.map((text, index) =&gt; (\n    &lt;li key={index}&gt;text ({text.length})&lt;/li&gt;\n  ));\n  return &lt;ul&gt;{textsElements}&lt;/ul&gt;;\n}\n\nStringLengths.propTypes = {\n  texts: PropTypes.string.isRequired,\n};\n</code></pre> ShowAlternating.jsx<pre><code>import PropTypes from \"prop-types\";\n\n/**\n * To instanciate &lt;ShowAlternating items={[\"un\", \"deux\", \"trois\"]} /&gt;\n * @param {{texts: string[]}}\n * @returns\n */\nexport default function ShowAlternating({ texts }) {\n  const textsElements = texts.map((text, index) =&gt; (\n    &lt;li\n      key={index}\n      style={{ backgroundColor: index % 2 === 0 ? \"grey\" : \"blue\" }}\n    &gt;\n      text ({text.length})\n    &lt;/li&gt;\n  ));\n  return &lt;ul&gt;{textsElements}&lt;/ul&gt;;\n}\n\nShowAlternating.propTypes = {\n  texts: PropTypes.string.isRequired,\n};\n</code></pre>"},{"location":"reactjs/#composition","title":"Composition","text":"<ol> <li>Cr\u00e9er un composant <code>SocialPost</code> qui prend en props les propri\u00e9t\u00e9s <code>author</code>, <code>date</code>, <code>content</code> et <code>avatar</code>. Afficher ces propri\u00e9t\u00e9s de fa\u00e7on jolie.<ul> <li>Par exemple, si <code>author = 'Alice'</code>, <code>date = '2022-01-01'</code>, <code>content = 'Hello world!'</code> et <code>avatar = 'alice.jpg'</code>, le composant affiche (de fa\u00e7on pas jolie):     <pre><code>&lt;img src=\"alice.jpg\" alt=\"Avatar de Alice\" /&gt;\n&lt;h2&gt;Alice&lt;/h2&gt;\n&lt;p&gt;2022-01-01&lt;/p&gt;\n&lt;p&gt;Hello world!&lt;/p&gt;\n</code></pre></li> </ul> </li> <li>Cr\u00e9er un composant <code>SocialPostList</code> qui prend en prop <code>posts</code> (un tableau d'objets avec les propri\u00e9t\u00e9s <code>author</code>, <code>date</code>, <code>content</code> et <code>avatar</code>) et affiche une liste de <code>SocialPost</code>.</li> <li>Cr\u00e9er un composant <code>HomePage</code> qui affiche un logo, un titre et une liste de <code>SocialPost</code>. Cr\u00e9er un composant <code>AboutPage</code> qui affiche un logo, un titre et un texte de pr\u00e9sentation. Dans le composant <code>App</code>, afficher les deux liens. Avec un bool\u00e9en <code>isHomePage</code>, afficher soit la page d'accueil, soit la page \"\u00e0 propos\" selon le lien sur lequel on clique.</li> </ol>"},{"location":"reactjs/#router","title":"Router","text":"<ol> <li>Cr\u00e9er un projet react avec vite et le template react. <code>npm create vite@latest my-react-app-2 -- --template react</code>.</li> <li>Pr\u00e9paration<ol> <li>Cr\u00e9er un composant <code>Home</code> qui affiche \"Bienvenue sur la page d'accueil\".</li> <li>Cr\u00e9er un composant <code>About</code> qui affiche \"\u00c0 propos de nous\".</li> <li>Cr\u00e9er un composant <code>Contact</code> qui affiche \"Contactez-nous\".</li> </ol> </li> <li>Nettoyer le composant <code>App</code>.     <pre><code>export default function App() {\n    return &lt;&gt;&lt;/&gt;;\n}\n</code></pre></li> <li>Installer <code>react-router-dom</code> avec <code>npm install react-router-dom</code>.</li> <li>Dans <code>src/main.jsx</code> Cr\u00e9er une table de routage en ajoutant le contenu suivant:     <pre><code>import { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport Home from \"./components/Home.jsx\";\nimport Contact from \"./components/Contact.jsx\";\nimport About from \"./components/About.jsx\";\n// Table de routage\nconst router = createBrowserRouter([\n{\n    path: \"/\",\n    element: &lt;App /&gt;,\n    children: [\n    {\n        path: \"/home\",\n        element: &lt;Home /&gt;,\n    },\n    {\n        path: \"/about\",\n        element: &lt;About /&gt;,\n    },\n    {\n        path: \"/contact\",\n        element: &lt;Contact /&gt;,\n    },\n    ],\n},\n]);\n</code></pre><ul> <li>modifier la partie <code>createRoot</code> pour utiliser <code>&lt;React.StrictMode&gt;</code> et <code>&lt;RouterProvider&gt;</code> (c'est lui va g\u00e9rer les routes de l'application). <pre><code>ReactDOM.createRoot(document.getElementById(\"root\")).render(\n&lt;React.StrictMode&gt;\n    &lt;RouterProvider router={router} /&gt;\n&lt;/React.StrictMode&gt;\n);\n</code></pre></li> <li>Il faut aussi importer <code>import ReactDOM from \"react-dom/client\";</code>.</li> <li>Fichier complet:</li> </ul> src/main.jsx <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport Home from \"./components/Home.jsx\";\nimport Contact from \"./components/Contact.jsx\";\nimport About from \"./components/About.jsx\";\n\nconst router = createBrowserRouter([\n{\n    path: \"/\",\n    element: &lt;App /&gt;,\n    children: [\n    {\n        path: \"/home\",\n        element: &lt;Home /&gt;,\n    },\n    {\n        path: \"/about\",\n        element: &lt;About /&gt;,\n    },\n    {\n        path: \"/contact\",\n        element: &lt;Contact /&gt;,\n    },\n    ],\n},\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n&lt;React.StrictMode&gt;\n    &lt;RouterProvider router={router} /&gt;\n&lt;/React.StrictMode&gt;\n);\n</code></pre> </li> <li>Dans le composant <code>App</code>, ajouter un lien vers la page d'accueil, la page \"\u00e0 propos\" et la page de contact (<code>{\" - \"}</code> permet de forcer un espace avant et apr\u00e8s le -).     <pre><code>import { Link } from \"react-router-dom\";\nexport default function App() {\n    return (\n    &lt;&gt;\n        &lt;h1&gt;React router demo&lt;/h1&gt;\n        &lt;nav&gt;\n            &lt;Link to=\"/home\"&gt;Accueil&lt;/Link&gt;{\" - \"}\n            &lt;Link to=\"/about\"&gt;\u00c0 propos&lt;/Link&gt;{\" - \"}\n            &lt;Link to=\"/contact\"&gt;Contact&lt;/Link&gt;\n        &lt;/nav&gt;\n    &lt;/&gt;\n    );\n}\n</code></pre></li> <li>Tester l'application en lan\u00e7ant <code>npm run dev</code>. Que constatez vous au niveau du rendu de votre app et de la barre d'adresse ?</li> <li>Ajouter le outlet dans le composant <code>App</code> pour afficher les pages enfants.     <pre><code>import { Outlet } from \"react-router-dom\";\nexport default function App() {\n    return (\n    &lt;&gt;\n        &lt;h1&gt;React router demo&lt;/h1&gt;\n        &lt;nav&gt;\n            &lt;Link to=\"/home\"&gt;Accueil&lt;/Link&gt;{\" - \"}\n            &lt;Link to=\"/about\"&gt;\u00c0 propos&lt;/Link&gt;{\" - \"}\n            &lt;Link to=\"/contact\"&gt;Contact&lt;/Link&gt;\n        &lt;/nav&gt;\n        &lt;Outlet /&gt;\n    &lt;/&gt;\n    );\n}\n</code></pre></li> <li>Comme les composants sont des pages, il est recommand\u00e9 de les d\u00e9placer dans le dossier <code>src/pages</code>. Appliquer cette convention \u00e0 l'avenir.</li> <li>On peut sp\u00e9cifier des param\u00e8tres dans des routes (par exemple pour afficher un item \u00e0 partir d'une liste).</li> </ol>"},{"location":"reactjs/#astuces","title":"Astuces","text":"<ul> <li>Pour activer la colorations des parenth\u00e8ses, accolades et crochets dans VSCode, activer l'option \"Bracket Pair colorization\" dans les param\u00e8tres.</li> <li>L'extension indent-rainbow permet de colorer les indentations.</li> </ul>"},{"location":"webia/","title":"Web et genAI","text":"<p>Nous allons aborder les liens entre ces deux technologies \u00e0 travers ces axes.</p> <ul> <li>Utilisation d'outils de genAI pour g\u00e9n\u00e9rer:<ul> <li>Des sites web</li> <li>Des images</li> <li>Des designs</li> </ul> </li> <li>Utilisation des API web pour faire de l'inf\u00e9rence sur des LLM</li> <li>Outils divers: gradio, cursor</li> </ul>"},{"location":"webia/#generation-via-la-genai","title":"G\u00e9n\u00e9ration via la genAI","text":""},{"location":"webia/#generation-de-sites","title":"G\u00e9n\u00e9ration de sites","text":"<p>Il vous est demand\u00e9 d'utiliser les deux outils suivants pour g\u00e9n\u00e9rer des sites web.</p> <ul> <li>Outils: v0.dev, bolt.new et marblism</li> <li>Objectif: g\u00e9n\u00e9rer un site web \u00e0 partir d'un texte g\u00e9n\u00e9r\u00e9 par un LLM</li> <li>Applications:<ul> <li>Gestionnaire de t\u00e2ches (Todo list)</li> <li>Blog avec gestion de l'authentification (avec auth0)</li> <li>Un site dont le th\u00e8me est de votre choix</li> </ul> </li> <li>Travail demand\u00e9:<ul> <li>G\u00e9n\u00e9rer chaque site propos\u00e9 avec chacun des outils (en faisant du prompt engineering)</li> <li>T\u00e9l\u00e9charger et tester le code g\u00e9n\u00e9r\u00e9 en local</li> <li>Critiquer la qualit\u00e9 le site g\u00e9n\u00e9r\u00e9. Un readme qui liste vos opinions sur:<ul> <li>La vitesse de G\u00e9n\u00e9ration</li> <li>La qualit\u00e9 des explications fournies par l'IA</li> <li>La qualit\u00e9 du code g\u00e9n\u00e9r\u00e9</li> <li>La simplicit\u00e9 d'ex\u00e9cution en local</li> <li>La facilit\u00e9 \u00e0 personnaliser</li> <li>Tout autre point que vous jugerez pertinent</li> </ul> </li> <li>Ajouter dans le readme l'encha\u00eenement des prompts utilis\u00e9s</li> <li>Proposer des am\u00e9liorations</li> <li>Vous pouvez vous faire aider d'autres outils ChatGPT, ClaudeAI ou copilotAI pour chacune des \u00e9tapes</li> </ul> </li> </ul>"},{"location":"webia/#generation-dimages","title":"G\u00e9n\u00e9ration d'images","text":"<ul> <li>Outils: DALL-E, Adobe Firefly, Canva AI</li> <li>Travail demand\u00e9:<ul> <li>G\u00e9n\u00e9rer un logo pour votre site</li> <li>G\u00e9n\u00e9rer des images pour les diff\u00e9rents sites g\u00e9n\u00e9r\u00e9s plus haut</li> </ul> </li> </ul>"},{"location":"webia/#generer-un-design","title":"G\u00e9n\u00e9rer un design","text":"<ul> <li>Outils: Le plugin Figma uidesign.ai, uizard</li> </ul>"},{"location":"webia/#web-et-llm","title":"Web et LLM","text":"<p>Dans cette partie, nous allons aborder les possibilit\u00e9s offertes par les LLM pour le web.</p> <p>Il y a deux possibilit\u00e9s; soit h\u00e9berger le LLM sur un serveur et l'appeler via une API REST, soit utiliser un mod\u00e8le embarqu\u00e9 dans le navigateur.</p> <p>La premi\u00e8re solution est plus simple et offre g\u00e9n\u00e9ralement plus de possibilit\u00e9s et de performance. La seconde est plus complexe et son temps de r\u00e9ponse d\u00e9pend de la machine de l'utiliser. Il faut \u00e9galement souligner que la premi\u00e8re solution n'est pas adapt\u00e9e app web c\u00f4t\u00e9 client, car elle expose votre cl\u00e9 API. Pour les serveur et les applications web g\u00e9n\u00e9r\u00e9es c\u00f4t\u00e9 serveur, la cl\u00e9 d'API doit \u00eatre s\u00e9curis\u00e9e pour n'\u00eatre vue que du serveur.</p>"},{"location":"webia/#inference-sur-llm-via-des-api-rest","title":"Inf\u00e9rence sur LLM via des API REST","text":"<p>Comme il existe plusieurs fournisseurs de LLM qui n'ont pas forc\u00e9ment la m\u00eame API, il est recommand\u00e9 d'utiliser une librairie qui abstrait ces diff\u00e9rences. Pour ce faire, nous allons utiliser langchain.js dans cette partie. Cette libraire supporte plusieurs fournisseurs de LLM et offre une API unifi\u00e9e ainsi que des fonctionnalit\u00e9s suppl\u00e9mentaires. Pour compl\u00e9ter, nous allons prendre une API gratuite parmi celles propos\u00e9es ici</p> <ul> <li><code>bun init</code> puis ouvrir le dossier et faire un <code>bun install</code></li> <li>Ajouter un fichier <code>.env</code> qui contient votre cl\u00e9 d'API (bun lit nativement les dotenv sans rien faire de notre c\u00f4t\u00e9)</li> <li>Suivre la doc google AI pour langchain (en rempla\u00e7ant <code>npm</code> par votre gestionnaire de paqu\u00eats)<ul> <li>Utiliser un mod\u00e8le Flash pour avoir plus de requ\u00eates par minutes</li> </ul> </li> <li>D\u00e9velopper un \u00e9quivalent de chatGPT qu'on va appeler chatGTP (chat j'ai TP) qui prend en entr\u00e9e un texte et g\u00e9n\u00e8re une r\u00e9ponse. Soyez cr\u00e9atifs !.<ul> <li>Bun support la r\u00e9cup\u00e9ration des argument de la ligne de commande. Voici la doc.</li> <li>Exemple d'utilisation \u00e0 la racine du projet: <code>bun run chatGTP \"Hello, how are you?\"</code> -&gt; <code>Hello, I'm fine, thank you. How can I help you?</code></li> <li>Astuces: marked-terminal permet d'\u00e9crire du markdown dans la console. chalk permet de colorer le texte.</li> </ul> </li> <li>Aller plus loin:<ul> <li>Impl\u00e9menter une m\u00e9moire basique sur disque</li> <li>Utiliser du tool calling</li> </ul> </li> </ul>"},{"location":"webia/#llm-embarque-dans-le-navigateur","title":"LLM embarqu\u00e9 dans le navigateur","text":"<p>Note</p> <p>Au momemnt de l'\u00e9criture de ce document (janvier 2025), les navigateurs n'embarquent pas de LLM. Chrome a fait une annonce \u00e0 ce sujet en 2024. Donc, pour le moement, il faut utiliser des librairies tierces pour embarquer un LLM dans le navigateur.</p> <p>Je propose de travailler sur ces deux librairies d'inf\u00e9rence de LLM dans le navigateur: Transformers.js et WebLLM.</p>"},{"location":"webia/#methode-de-travail-conseillee","title":"M\u00e9thode de travail conseill\u00e9e","text":"<p>Il est recommand\u00e9 d'utiliser un bundler pour simplifier l'importation des libraires. Nous allons utiliser vite pour ce faire. Nous allons \u00e9galement utiliser bun comme gestionnaire de projet.</p> <ul> <li>Cr\u00e9er un projet vite de type vanilla (sans framework) en TypeScript: <code>bun create vite langchainjs_demo --template vanilla-ts</code><ul> <li><code>cd langchainjs_demo</code> puis <code>bun install</code>, puis <code>bun dev</code></li> </ul> </li> <li>Ouvrir le projet avec votre IDE</li> </ul>"},{"location":"webia/#transformersjs","title":"Transformers.js","text":"<p>Transformers.js est une librairie qui permet d'utiliser les mod\u00e8les de Hugging Face dans le navigateur. Il est recommand\u00e9 d'utiliser les mod\u00e8les propos\u00e9s par Xenova pour tirer parti du WebGPU. D'ailleurs, ce dernier propose plusieurs d\u00e9mos</p> <ul> <li>Nous allons utiliser le mod\u00e8le <code>phi3.5-webgpu</code>.</li> <li>Copier dans src le fichier worker.js<ul> <li>Ce web worker contient le code pour charger le mod\u00e8le et faire des inf\u00e9rences</li> </ul> </li> <li>Le worker \u00e9coute les messages suivants:<ul> <li><code>{type: \"load\"}</code>: pour charger le mod\u00e8le</li> <li><code>{type: \"check\"}</code>: lance une exception si il y un souci c\u00f4t\u00e9 WebGPU</li> <li><code>{type: \"generate\", data: messages}</code>: envoie un message pour g\u00e9n\u00e9rer du texte.     <code>messages</code> est un tableau de <code>Message</code> d\u00e9finit par la libraire transformers.js ainsi <code>export type Message = {role: string; content: string};</code>.     Exemple de message: <code>[{role: \"user\", content: \"Hello\"}]</code></li> </ul> </li> <li>Le worker envoie des messages diff\u00e9rentes selon la valeur de <code>e.data.status</code>:<ul> <li><code>\"loading\"</code>: D\u00e9but du chargement</li> <li><code>\"progress\"</code>: Rapporte la progression du chargement</li> <li><code>\"ready\"</code>: Signale que le mod\u00e8le est charg\u00e9</li> <li><code>\"start\"</code>: Signale que le texte est en d\u00e9but de g\u00e9n\u00e9ration</li> <li><code>\"update\"</code>: Signale que le texte est en cours de g\u00e9n\u00e9ration</li> <li><code>\"complete\"</code>: Signale que le texte a \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9</li> <li><code>\"error\"</code>: Signale une erreur</li> </ul> </li> <li>Impl\u00e9menter un formulaire pour envoyer des messages au worker.</li> <li>Pour avoir un \u00e9change avec m\u00e9moire, il faut mettre \u00e0 jour <code>messages</code> \u00e0 chaque message re\u00e7u et envoy\u00e9.     Par exemple, si le mod\u00e8le r\u00e9pond \"Hello\", <code>messages</code> deviendrait <code>[...messages, {role: \"assistant\", content: \"Hello, how can I help?\"}]</code>.     Et, si par la suite, l'utilisateur demande \"How are you?\", l'objet <code>messages</code> \u00e0 envoyer au LLM serait <code>messages</code> serait     <pre><code>[\n    { role: \"user\", content: \"Hello\" },\n    { role: \"assistant\", content: \"Hello, how can I help?\" },\n    { role: \"user\", content: \"How are you?\" },\n];\n</code></pre></li> </ul>"},{"location":"webia/#webllm","title":"WebLLM","text":"<p>A exp\u00e9rimenter selon le temps restant.</p>"},{"location":"webia/#ressources","title":"Ressources","text":"<ul> <li>Best Bolt.New Alternatives for Your AI App</li> <li>Top Bolt.new Alternatives</li> </ul>"}]}